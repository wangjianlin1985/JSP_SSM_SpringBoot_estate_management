<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.BuildingMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加楼栋记录 -->
	<insert id="addBuilding" parameterType="building">
		insert into t_building(buildingName,buildingMemo) values 
		(#{buildingName},#{buildingMemo})
	</insert>

	<!-- 按照查询条件分页查询楼栋记录 -->
	<select id="queryBuilding" resultMap="buildingMap" >
		select t_building.* from t_building ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="buildingMap" type="building">
        <id property="buildingId" column="buildingId" />
    </resultMap>

    <!-- 按照查询条件查询所有楼栋记录 -->
	<select id="queryBuildingList" resultMap="buildingMap" >
		select t_building.* from t_building ${where}
	</select>

    <!-- 按照查询条件的楼栋记录数 -->
	<select id="queryBuildingCount" resultType="int">
		select count(*) from t_building ${where}
	</select>

	<!-- 根据主键查询某个楼栋记录 -->
	<select id="getBuilding" parameterType="int" resultMap="buildingMap">
		select * from t_building where t_building.buildingId = #{buildingId}
	</select>

	<!-- 更新楼栋记录 -->
	<update id="updateBuilding" parameterType="building">
		update t_building set buildingName=#{buildingName},buildingMemo=#{buildingMemo} where buildingId = #{buildingId}
	</update>

	<!-- 删除楼栋记录 -->
	<delete id="deleteBuilding" parameterType="int">
		delete from t_building where buildingId=#{buildingId}
	</delete>

</mapper>
